---
- name: Install PostgreSQL RPM
  ansible.builtin.dnf:
    name: "{{ posgtresql_rpm }}"
    disable_gpg_check: yes

- name: Disable Repo GPG check of PostgreSQL repo
  ansible.builtin.replace:
    path: /etc/yum.repos.d/pgdg-redhat-all.repo
    regexp: 'repo_gpgcheck = 1'
    replace: 'repo_gpgcheck = 0'

- name: Disable default PostgreSQL module
  ansible.builtin.command: dnf -qy --nogpgcheck module disable postgresql
  changed_when: false

- name: Install Core DNF Plugins
  ansible.builtin.dnf:
    name: dnf-plugins-core

- name: Check if PowerTools repository is enabled
  ansible.builtin.shell:
    cmd: dnf repolist enabled | grep -qw powertools
  register: powertools_check
  changed_when: false
  ignore_errors: true
  when:
    - ansible_distribution == "CentOS"
    - ansible_distribution_major_version == "8"

- name: Enable CentOS PowerTools repository
  ansible.builtin.command:
    cmd: dnf config-manager --set-enabled powertools
  changed_when: powertools_check.rc != 0
  when:
    - ansible_distribution == "CentOS"
    - ansible_distribution_major_version == "8"
    - powertools_check.rc != 0

- name: Check if CodeReady Builder repository is enabled (CentOS Stream 9)
  ansible.builtin.shell:
    cmd: dnf repolist enabled | grep -qw crb
  register: crb_check
  changed_when: false
  ignore_errors: true
  when:
    - ansible_distribution == "CentOS"
    - ansible_distribution_major_version == "9"

- name: Enable CodeReady Builder repository (CentOS Stream 9)
  ansible.builtin.command:
    cmd: dnf config-manager --set-enabled crb
  changed_when: crb_check.rc != 0
  when:
    - ansible_distribution == "CentOS"
    - ansible_distribution_major_version == "9"
    - crb_check.rc != 0

- name: Install perl(IPC::Run)
  ansible.builtin.dnf:
    name: perl-IPC-Run
    state: present

- name: Install PostgreSQL
  ansible.builtin.dnf:
    name: "{{ item }}"
    state: present
    disable_gpg_check: yes
  loop: "{{ postgresql_packages }}"

- name: Create a new PostgreSQL database cluster(CentOS8)
  ansible.builtin.shell:
    cmd: '{{ postgresql_init_cmd }}'  # noqa command-instead-of-shell
  register: initdb_output
  changed_when: "'Initializing database ... OK' in initdb_output.stdout"
  ignore_errors: true
  environment:
    PGSETUP_INITDB_OPTIONS: '{{ postgresql_init_cmd_options }}'

- name: Start PostgreSQL server
  ansible.builtin.systemd_service:
    name: '{{ postgresql_service_name }}'
    state: started
    enabled: true
